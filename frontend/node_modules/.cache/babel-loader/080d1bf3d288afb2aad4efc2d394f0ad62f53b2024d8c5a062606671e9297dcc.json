{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport instance from \"../../token/interceptors\";\nconst Logout = ({\n  onNavigate,\n  onLogout\n}) => {\n  _s();\n  const hasRun = useRef(false);\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: localStorage.getItem(\"Authorization\"),\n      \"Authorization-refresh\": localStorage.getItem(\"Authorization-refresh\")\n    }\n  };\n  const handleCommit = async () => {\n    console.log(\"logout start\");\n    const userId = localStorage.getItem(\"userId\");\n    console.log(\"logout userId =>\", userId);\n    try {\n      await instance.delete(`/member/logout`, config);\n    } catch (error) {\n      console.warn(\"logout 실패 =>\", error.message);\n    }\n\n    // 로컬스토리지 완전 정리\n    localStorage.clear();\n\n    // App 상태 초기화\n    onLogout(); // currentUser = null, currentPage = main\n    onNavigate(\"main\"); // 메인화면으로 이동\n\n    console.log(\"logout 완료, 메인 페이지 이동\");\n  };\n  useEffect(() => {\n    if (!hasRun.current) {\n      hasRun.current = true;\n      handleCommit();\n    }\n  }, []);\n  return null; // 별도 렌더링 필요 없음\n};\n_s(Logout, \"/+YHx4VX9OVYfM2tjd2Yl6u+s9U=\");\n_c = Logout;\nexport default Logout;\nvar _c;\n$RefreshReg$(_c, \"Logout\");","map":{"version":3,"names":["React","useEffect","useRef","instance","Logout","onNavigate","onLogout","_s","hasRun","config","headers","Authorization","localStorage","getItem","handleCommit","console","log","userId","delete","error","warn","message","clear","current","_c","$RefreshReg$"],"sources":["C:/web_ai/react-workspace/STrio_LungMate/frontend/src/components/login/Logout.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport instance from \"../../token/interceptors\";\r\n\r\nconst Logout = ({ onNavigate, onLogout }) => {\r\n  const hasRun = useRef(false);\r\n\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: localStorage.getItem(\"Authorization\"),\r\n      \"Authorization-refresh\": localStorage.getItem(\"Authorization-refresh\"),\r\n    },\r\n  };\r\n\r\n  const handleCommit = async () => {\r\n    console.log(\"logout start\");\r\n    const userId = localStorage.getItem(\"userId\");\r\n    console.log(\"logout userId =>\", userId);\r\n\r\n    try {\r\n      await instance.delete(`/member/logout`, config);\r\n    } catch (error) {\r\n      console.warn(\"logout 실패 =>\", error.message);\r\n    }\r\n\r\n    // 로컬스토리지 완전 정리\r\n    localStorage.clear();\r\n\r\n    // App 상태 초기화\r\n    onLogout(); // currentUser = null, currentPage = main\r\n    onNavigate(\"main\"); // 메인화면으로 이동\r\n\r\n    console.log(\"logout 완료, 메인 페이지 이동\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!hasRun.current) {\r\n      hasRun.current = true;\r\n      handleCommit();\r\n    }\r\n  }, []);\r\n\r\n  return null; // 별도 렌더링 필요 없음\r\n};\r\n\r\nexport default Logout;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,QAAQ,MAAM,0BAA0B;AAE/C,MAAMC,MAAM,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAMC,MAAM,GAAGN,MAAM,CAAC,KAAK,CAAC;EAE5B,MAAMO,MAAM,GAAG;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAEC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;MACpD,uBAAuB,EAAED,YAAY,CAACC,OAAO,CAAC,uBAAuB;IACvE;EACF,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3B,MAAMC,MAAM,GAAGL,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC7CE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,MAAM,CAAC;IAEvC,IAAI;MACF,MAAMd,QAAQ,CAACe,MAAM,CAAC,gBAAgB,EAAET,MAAM,CAAC;IACjD,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdJ,OAAO,CAACK,IAAI,CAAC,cAAc,EAAED,KAAK,CAACE,OAAO,CAAC;IAC7C;;IAEA;IACAT,YAAY,CAACU,KAAK,CAAC,CAAC;;IAEpB;IACAhB,QAAQ,CAAC,CAAC,CAAC,CAAC;IACZD,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;;IAEpBU,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;EACrC,CAAC;EAEDf,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,MAAM,CAACe,OAAO,EAAE;MACnBf,MAAM,CAACe,OAAO,GAAG,IAAI;MACrBT,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;AAACP,EAAA,CAxCIH,MAAM;AAAAoB,EAAA,GAANpB,MAAM;AA0CZ,eAAeA,MAAM;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}