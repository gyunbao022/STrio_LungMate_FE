{"ast":null,"code":"import axios from \"axios\";\n\n// ✅ 토큰 갱신 요청 함수\nconst refreshAccessToken = async () => {\n  try {\n    const refreshToken = localStorage.getItem(\"Authorization-refresh\");\n    if (!refreshToken) throw new Error(\"refreshToken 없음\");\n    const response = await axios.post(\"/auth/refresh\", {}, {\n      baseURL: \"http://localhost:8090\",\n      headers: {\n        \"Authorization-refresh\": refreshToken\n      },\n      withCredentials: true\n    });\n    return response.data.accessToken;\n  } catch (error) {\n    console.error(\" refreshToken 갱신 실패:\", error);\n    throw error;\n  }\n};\n\n// ✅ Axios 인스턴스 생성\nconst instance = axios.create({\n  baseURL: \"http://localhost:8090\",\n  withCredentials: true // 쿠키 및 인증정보 포함\n});\n\n// ✅ 요청 인터셉터: accessToken 자동 포함\ninstance.interceptors.request.use(config => {\n  console.log(\"요청 인터셉터 =>\", config);\n  const token = localStorage.getItem(\"Authorization\");\n  if (token) {\n    config.headers[\"Authorization\"] = token; // \"Bearer ...\" 형식이어야 함\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// ✅ 응답 인터셉터: accessToken 만료 시 refreshToken으로 재발급 요청\ninstance.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // accessToken 만료로 인한 401 에러인 경우만 처리\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const newAccessToken = await refreshAccessToken();\n      const bearerToken = `Bearer ${newAccessToken}`;\n\n      // 토큰 저장 및 요청 헤더 재설정\n      localStorage.setItem(\"Authorization\", bearerToken);\n      originalRequest.headers[\"Authorization\"] = bearerToken;\n\n      // ✅ FormData일 경우 Content-Type 수동 지정 (자동 인식 안 되는 경우 대비)\n      if (originalRequest.data instanceof FormData && !originalRequest.headers[\"Content-Type\"]) {\n        originalRequest.headers[\"Content-Type\"] = \"multipart/form-data\";\n      }\n\n      // ✅ 기존 요청 재시도\n      return instance(originalRequest);\n    } catch (refreshError) {\n      console.error(\" 재요청 중 refreshToken 재발급 실패\", refreshError);\n\n      // refreshToken도 만료되었거나 에러 발생 → 로그아웃 처리\n      localStorage.removeItem(\"Authorization\");\n      localStorage.removeItem(\"Authorization-refresh\");\n      localStorage.removeItem(\"adminId\");\n      localStorage.removeItem(\"pwd\");\n      localStorage.removeItem(\"isLogin\");\n      window.alert(\"세션이 만료되었습니다. 다시 로그인해 주세요.\");\n      window.location.replace(\"/login\");\n      return Promise.reject(refreshError);\n    }\n  }\n\n  // 그 외 오류는 그대로 전파\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","refreshAccessToken","refreshToken","localStorage","getItem","Error","response","post","baseURL","headers","withCredentials","data","accessToken","error","console","instance","create","interceptors","request","use","config","log","token","Promise","reject","originalRequest","status","_retry","newAccessToken","bearerToken","setItem","FormData","refreshError","removeItem","window","alert","location","replace"],"sources":["C:/web_ai/react-workspace/STrio_LungMate/frontend/src/token/interceptors.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// ✅ 토큰 갱신 요청 함수\r\nconst refreshAccessToken = async () => {\r\n  try {\r\n    const refreshToken = localStorage.getItem(\"Authorization-refresh\");\r\n    if (!refreshToken) throw new Error(\"refreshToken 없음\");\r\n\r\n    const response = await axios.post(\r\n      \"/auth/refresh\",\r\n      {},\r\n      {\r\n        baseURL: \"http://localhost:8090\",\r\n        headers: {\r\n          \"Authorization-refresh\": refreshToken,\r\n        },\r\n        withCredentials: true,\r\n      }\r\n    );\r\n\r\n    return response.data.accessToken;\r\n  } catch (error) {\r\n    console.error(\" refreshToken 갱신 실패:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Axios 인스턴스 생성\r\nconst instance = axios.create({\r\n  baseURL: \"http://localhost:8090\",\r\n  withCredentials: true, // 쿠키 및 인증정보 포함\r\n});\r\n\r\n// ✅ 요청 인터셉터: accessToken 자동 포함\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    console.log(\"요청 인터셉터 =>\", config);\r\n    const token = localStorage.getItem(\"Authorization\");\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = token; // \"Bearer ...\" 형식이어야 함\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// ✅ 응답 인터셉터: accessToken 만료 시 refreshToken으로 재발급 요청\r\ninstance.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    // accessToken 만료로 인한 401 에러인 경우만 처리\r\n    if (\r\n      error.response &&\r\n      error.response.status === 401 &&\r\n      !originalRequest._retry\r\n    ) {\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        const newAccessToken = await refreshAccessToken();\r\n        const bearerToken = `Bearer ${newAccessToken}`;\r\n\r\n        // 토큰 저장 및 요청 헤더 재설정\r\n        localStorage.setItem(\"Authorization\", bearerToken);\r\n        originalRequest.headers[\"Authorization\"] = bearerToken;\r\n\r\n        // ✅ FormData일 경우 Content-Type 수동 지정 (자동 인식 안 되는 경우 대비)\r\n        if (\r\n          originalRequest.data instanceof FormData &&\r\n          !originalRequest.headers[\"Content-Type\"]\r\n        ) {\r\n          originalRequest.headers[\"Content-Type\"] = \"multipart/form-data\";\r\n        }\r\n\r\n        // ✅ 기존 요청 재시도\r\n        return instance(originalRequest);\r\n      } catch (refreshError) {\r\n        console.error(\" 재요청 중 refreshToken 재발급 실패\", refreshError);\r\n\r\n        // refreshToken도 만료되었거나 에러 발생 → 로그아웃 처리\r\n        localStorage.removeItem(\"Authorization\");\r\n        localStorage.removeItem(\"Authorization-refresh\");\r\n        localStorage.removeItem(\"adminId\");\r\n        localStorage.removeItem(\"pwd\");\r\n        localStorage.removeItem(\"isLogin\");\r\n\r\n        window.alert(\"세션이 만료되었습니다. 다시 로그인해 주세요.\");\r\n        window.location.replace(\"/login\");\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n\r\n    // 그 외 오류는 그대로 전파\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,uBAAuB,CAAC;IAClE,IAAI,CAACF,YAAY,EAAE,MAAM,IAAIG,KAAK,CAAC,iBAAiB,CAAC;IAErD,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAC/B,eAAe,EACf,CAAC,CAAC,EACF;MACEC,OAAO,EAAE,uBAAuB;MAChCC,OAAO,EAAE;QACP,uBAAuB,EAAEP;MAC3B,CAAC;MACDQ,eAAe,EAAE;IACnB,CACF,CAAC;IAED,OAAOJ,QAAQ,CAACK,IAAI,CAACC,WAAW;EAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAME,QAAQ,GAAGf,KAAK,CAACgB,MAAM,CAAC;EAC5BR,OAAO,EAAE,uBAAuB;EAChCE,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AAEF;AACAK,QAAQ,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACVN,OAAO,CAACO,GAAG,CAAC,YAAY,EAAED,MAAM,CAAC;EACjC,MAAME,KAAK,GAAGnB,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;EACnD,IAAIkB,KAAK,EAAE;IACTF,MAAM,CAACX,OAAO,CAAC,eAAe,CAAC,GAAGa,KAAK,CAAC,CAAC;EAC3C;EACA,OAAOF,MAAM;AACf,CAAC,EACAP,KAAK,IAAKU,OAAO,CAACC,MAAM,CAACX,KAAK,CACjC,CAAC;;AAED;AACAE,QAAQ,CAACE,YAAY,CAACX,QAAQ,CAACa,GAAG,CAC/Bb,QAAQ,IAAKA,QAAQ,EACtB,MAAOO,KAAK,IAAK;EACf,MAAMY,eAAe,GAAGZ,KAAK,CAACO,MAAM;;EAEpC;EACA,IACEP,KAAK,CAACP,QAAQ,IACdO,KAAK,CAACP,QAAQ,CAACoB,MAAM,KAAK,GAAG,IAC7B,CAACD,eAAe,CAACE,MAAM,EACvB;IACAF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF,MAAMC,cAAc,GAAG,MAAM3B,kBAAkB,CAAC,CAAC;MACjD,MAAM4B,WAAW,GAAG,UAAUD,cAAc,EAAE;;MAE9C;MACAzB,YAAY,CAAC2B,OAAO,CAAC,eAAe,EAAED,WAAW,CAAC;MAClDJ,eAAe,CAAChB,OAAO,CAAC,eAAe,CAAC,GAAGoB,WAAW;;MAEtD;MACA,IACEJ,eAAe,CAACd,IAAI,YAAYoB,QAAQ,IACxC,CAACN,eAAe,CAAChB,OAAO,CAAC,cAAc,CAAC,EACxC;QACAgB,eAAe,CAAChB,OAAO,CAAC,cAAc,CAAC,GAAG,qBAAqB;MACjE;;MAEA;MACA,OAAOM,QAAQ,CAACU,eAAe,CAAC;IAClC,CAAC,CAAC,OAAOO,YAAY,EAAE;MACrBlB,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEmB,YAAY,CAAC;;MAEzD;MACA7B,YAAY,CAAC8B,UAAU,CAAC,eAAe,CAAC;MACxC9B,YAAY,CAAC8B,UAAU,CAAC,uBAAuB,CAAC;MAChD9B,YAAY,CAAC8B,UAAU,CAAC,SAAS,CAAC;MAClC9B,YAAY,CAAC8B,UAAU,CAAC,KAAK,CAAC;MAC9B9B,YAAY,CAAC8B,UAAU,CAAC,SAAS,CAAC;MAElCC,MAAM,CAACC,KAAK,CAAC,2BAA2B,CAAC;MACzCD,MAAM,CAACE,QAAQ,CAACC,OAAO,CAAC,QAAQ,CAAC;MACjC,OAAOd,OAAO,CAACC,MAAM,CAACQ,YAAY,CAAC;IACrC;EACF;;EAEA;EACA,OAAOT,OAAO,CAACC,MAAM,CAACX,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeE,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}