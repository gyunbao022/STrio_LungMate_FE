{"ast":null,"code":"import React,{useState,useEffect}from'react';import ImageUploader from'./ImageUploader';import ResultCard from'./ResultCard';import placeholderImage from'images/Main_image1.jpg';import styles from'./Diagnosis.module.css';// Gemini API 호출 로직 (원래는 별도 api.js 파일로 분리하는 것이 좋습니다)\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";async function callGeminiAPI(systemPrompt,userQuery){var _result$candidates,_result$candidates$,_result$candidates$$c,_result$candidates$$c2,_result$candidates$$c3;const apiKey=\"\";// 실제 앱에서는 백엔드에서 안전하게 처리해야 합니다.\nconst apiUrl=\"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=\".concat(apiKey);const payload={contents:[{parts:[{text:userQuery}]}],systemInstruction:{parts:[{text:systemPrompt}]}};const response=await fetch(apiUrl,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});if(!response.ok)throw new Error(\"API call failed: \".concat(response.status));const result=await response.json();return(_result$candidates=result.candidates)===null||_result$candidates===void 0?void 0:(_result$candidates$=_result$candidates[0])===null||_result$candidates$===void 0?void 0:(_result$candidates$$c=_result$candidates$.content)===null||_result$candidates$$c===void 0?void 0:(_result$candidates$$c2=_result$candidates$$c.parts)===null||_result$candidates$$c2===void 0?void 0:(_result$candidates$$c3=_result$candidates$$c2[0])===null||_result$candidates$$c3===void 0?void 0:_result$candidates$$c3.text;}function Diagnosis(_ref){let{xrayId}=_ref;// xrayId를 prop으로 받습니다.\nconst[imageFile,setImageFile]=useState(null);const[isLoading,setIsLoading]=useState(false);const[analysisResult,setAnalysisResult]=useState(null);const[summaryResult,setSummaryResult]=useState(null);const[isSummaryLoading,setIsSummaryLoading]=useState(false);useEffect(()=>{if(xrayId){// xrayId가 있으면, 해당 ID로 판독 정보를 불러옵니다.\n// 지금은 실제 API가 없으므로 더미 데이터로 시뮬레이션합니다.\nsetIsLoading(true);setTimeout(()=>{setImageFile(placeholderImage);setAnalysisResult({isPneumonia:true,confidence:0.92});setSummaryResult(\"X-Ray ID: \".concat(xrayId,\"\\n\\n**Findings:**\\n- Opacity in the right lower lobe.\\n\\n**Impression:**\\n- Findings are consistent with pneumonia.\"));setIsLoading(false);},1000);}},[xrayId]);const handleImageSelect=file=>{setImageFile(file);setAnalysisResult(null);setSummaryResult(null);};const handleAnalyze=()=>{setIsLoading(true);setAnalysisResult(null);setTimeout(()=>{const isPneumonia=Math.random()>0.5;const confidence=Math.random()*(0.99-0.85)+0.85;setAnalysisResult({isPneumonia,confidence});setIsLoading(false);},2500);};const handleGenerateSummary=async()=>{if(!analysisResult)return;setIsSummaryLoading(true);setSummaryResult(null);const{isPneumonia,confidence}=analysisResult;const resultString=isPneumonia?\"Pneumonia Suspected\":\"Normal\";const confidencePercent=(confidence*100).toFixed(1);const systemPrompt=\"You are a medical AI assistant specializing in radiology. Based on the analysis result of a chest X-ray, generate a brief, professional-looking report. The report should include a \\\"Findings\\\" section and an \\\"Impression\\\" section. The language must be concise and formal. Do not add any extra information or disclaimers.\";const userQuery=\"Analysis Result: \".concat(resultString,\", Confidence Score: \").concat(confidencePercent,\"%. Generate the report.\");try{const text=await callGeminiAPI(systemPrompt,userQuery);setSummaryResult(text);}catch(error){setSummaryResult(\"오류가 발생하여 소견을 생성할 수 없습니다.\");console.error(error);}finally{setIsSummaryLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:styles.diagnosisContainer,children:[/*#__PURE__*/_jsxs(\"header\",{className:styles.diagnosisHeader,children:[/*#__PURE__*/_jsx(\"h1\",{className:styles.diagnosisTitle,children:\"AI \\uD3D0\\uB834 \\uC9C4\\uB2E8 \\uC5B4\\uC2DC\\uC2A4\\uD134\\uD2B8\"}),/*#__PURE__*/_jsx(\"p\",{className:styles.diagnosisSubtitle,children:xrayId?\"X-Ray ID: \".concat(xrayId,\"\\uC5D0 \\uB300\\uD55C \\uD310\\uB3C5 \\uC815\\uBCF4\\uC785\\uB2C8\\uB2E4.\"):'흉부 X-ray 이미지를 업로드하여 폐렴 가능성을 확인해 보세요.'})]}),/*#__PURE__*/_jsx(\"main\",{className:styles.diagnosisMain,children:/*#__PURE__*/_jsxs(\"div\",{className:styles.diagnosisGrid,children:[/*#__PURE__*/_jsx(ImageUploader,{onImageSelect:handleImageSelect,onAnalyze:handleAnalyze,isLoading:isLoading,imageFile:imageFile}),/*#__PURE__*/_jsx(ResultCard,{analysisResult:analysisResult,summaryResult:summaryResult,onGenerateSummary:handleGenerateSummary,isSummaryLoading:isSummaryLoading})]})})]});}export default Diagnosis;","map":{"version":3,"names":["React","useState","useEffect","ImageUploader","ResultCard","placeholderImage","styles","jsx","_jsx","jsxs","_jsxs","callGeminiAPI","systemPrompt","userQuery","_result$candidates","_result$candidates$","_result$candidates$$c","_result$candidates$$c2","_result$candidates$$c3","apiKey","apiUrl","concat","payload","contents","parts","text","systemInstruction","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","result","json","candidates","content","Diagnosis","_ref","xrayId","imageFile","setImageFile","isLoading","setIsLoading","analysisResult","setAnalysisResult","summaryResult","setSummaryResult","isSummaryLoading","setIsSummaryLoading","setTimeout","isPneumonia","confidence","handleImageSelect","file","handleAnalyze","Math","random","handleGenerateSummary","resultString","confidencePercent","toFixed","error","console","className","diagnosisContainer","children","diagnosisHeader","diagnosisTitle","diagnosisSubtitle","diagnosisMain","diagnosisGrid","onImageSelect","onAnalyze","onGenerateSummary"],"sources":["D:/Medical AI/2nd_project_STrio/frontend/src/features/diagnosis/Diagnosis.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ImageUploader from './ImageUploader';\r\nimport ResultCard from './ResultCard';\r\nimport placeholderImage from 'images/Main_image1.jpg';\r\nimport styles from './Diagnosis.module.css';\r\n\r\n// Gemini API 호출 로직 (원래는 별도 api.js 파일로 분리하는 것이 좋습니다)\r\nasync function callGeminiAPI(systemPrompt, userQuery) {\r\n    const apiKey = \"\"; // 실제 앱에서는 백엔드에서 안전하게 처리해야 합니다.\r\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\r\n    const payload = { \r\n        contents: [{ parts: [{ text: userQuery }] }], \r\n        systemInstruction: { parts: [{ text: systemPrompt }] }, \r\n    };\r\n    const response = await fetch(apiUrl, { \r\n        method: 'POST', \r\n        headers: { 'Content-Type': 'application/json' }, \r\n        body: JSON.stringify(payload) \r\n    });\r\n    if (!response.ok) throw new Error(`API call failed: ${response.status}`);\r\n    const result = await response.json();\r\n    return result.candidates?.[0]?.content?.parts?.[0]?.text;\r\n}\r\n\r\nfunction Diagnosis({ xrayId }) { // xrayId를 prop으로 받습니다.\r\n    const [imageFile, setImageFile] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [analysisResult, setAnalysisResult] = useState(null);\r\n    const [summaryResult, setSummaryResult] = useState(null);\r\n    const [isSummaryLoading, setIsSummaryLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (xrayId) {\r\n            // xrayId가 있으면, 해당 ID로 판독 정보를 불러옵니다.\r\n            // 지금은 실제 API가 없으므로 더미 데이터로 시뮬레이션합니다.\r\n            setIsLoading(true);\r\n            setTimeout(() => {\r\n                setImageFile(placeholderImage);\r\n                setAnalysisResult({ isPneumonia: true, confidence: 0.92 });\r\n                setSummaryResult(`X-Ray ID: ${xrayId}\\n\\n**Findings:**\\n- Opacity in the right lower lobe.\\n\\n**Impression:**\\n- Findings are consistent with pneumonia.`);\r\n                setIsLoading(false);\r\n            }, 1000);\r\n        }\r\n    }, [xrayId]);\r\n\r\n    const handleImageSelect = (file) => {\r\n        setImageFile(file);\r\n        setAnalysisResult(null);\r\n        setSummaryResult(null);\r\n    };\r\n\r\n    const handleAnalyze = () => {\r\n        setIsLoading(true);\r\n        setAnalysisResult(null);\r\n        setTimeout(() => {\r\n            const isPneumonia = Math.random() > 0.5;\r\n            const confidence = Math.random() * (0.99 - 0.85) + 0.85;\r\n            setAnalysisResult({ isPneumonia, confidence });\r\n            setIsLoading(false);\r\n        }, 2500);\r\n    };\r\n    \r\n    const handleGenerateSummary = async () => {\r\n        if (!analysisResult) return;\r\n        setIsSummaryLoading(true);\r\n        setSummaryResult(null);\r\n        const { isPneumonia, confidence } = analysisResult;\r\n        const resultString = isPneumonia ? \"Pneumonia Suspected\" : \"Normal\";\r\n        const confidencePercent = (confidence * 100).toFixed(1);\r\n        const systemPrompt = `You are a medical AI assistant specializing in radiology. Based on the analysis result of a chest X-ray, generate a brief, professional-looking report. The report should include a \"Findings\" section and an \"Impression\" section. The language must be concise and formal. Do not add any extra information or disclaimers.`;\r\n        const userQuery = `Analysis Result: ${resultString}, Confidence Score: ${confidencePercent}%. Generate the report.`;\r\n        try {\r\n            const text = await callGeminiAPI(systemPrompt, userQuery);\r\n            setSummaryResult(text);\r\n        } catch (error) {\r\n            setSummaryResult(\"오류가 발생하여 소견을 생성할 수 없습니다.\");\r\n            console.error(error);\r\n        } finally {\r\n            setIsSummaryLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={styles.diagnosisContainer}>\r\n             <header className={styles.diagnosisHeader}>\r\n                <h1 className={styles.diagnosisTitle}>\r\n                    AI 폐렴 진단 어시스턴트\r\n                </h1>\r\n                <p className={styles.diagnosisSubtitle}>\r\n                    {xrayId ? `X-Ray ID: ${xrayId}에 대한 판독 정보입니다.` : '흉부 X-ray 이미지를 업로드하여 폐렴 가능성을 확인해 보세요.'}\r\n                </p>\r\n            </header>\r\n            <main className={styles.diagnosisMain}>\r\n                <div className={styles.diagnosisGrid}>\r\n                    <ImageUploader \r\n                        onImageSelect={handleImageSelect}\r\n                        onAnalyze={handleAnalyze}\r\n                        isLoading={isLoading}\r\n                        imageFile={imageFile}\r\n                    />\r\n                    <ResultCard \r\n                        analysisResult={analysisResult}\r\n                        summaryResult={summaryResult}\r\n                        onGenerateSummary={handleGenerateSummary}\r\n                        isSummaryLoading={isSummaryLoading}\r\n                    />\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Diagnosis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}