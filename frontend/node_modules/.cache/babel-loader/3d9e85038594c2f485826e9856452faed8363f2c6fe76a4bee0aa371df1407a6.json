{"ast":null,"code":"var _jsxFileName = \"D:\\\\Medical AI\\\\2nd_project_STrio\\\\frontend\\\\src\\\\components\\\\diagnosis\\\\Diagnosis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ImageUploader from './ImageUploader';\nimport ResultCard from './ResultCard';\n\n// Gemini API 호출 로직 (원래는 별도 api.js 파일로 분리하는 것이 좋습니다)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function callGeminiAPI(systemPrompt, userQuery) {\n  var _result$candidates, _result$candidates$, _result$candidates$$c, _result$candidates$$c2, _result$candidates$$c3;\n  const apiKey = \"\"; // 실제 앱에서는 백엔드에서 안전하게 처리해야 합니다.\n  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\n  const payload = {\n    contents: [{\n      parts: [{\n        text: userQuery\n      }]\n    }],\n    systemInstruction: {\n      parts: [{\n        text: systemPrompt\n      }]\n    }\n  };\n  const response = await fetch(apiUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  });\n  if (!response.ok) throw new Error(`API call failed: ${response.status}`);\n  const result = await response.json();\n  return (_result$candidates = result.candidates) === null || _result$candidates === void 0 ? void 0 : (_result$candidates$ = _result$candidates[0]) === null || _result$candidates$ === void 0 ? void 0 : (_result$candidates$$c = _result$candidates$.content) === null || _result$candidates$$c === void 0 ? void 0 : (_result$candidates$$c2 = _result$candidates$$c.parts) === null || _result$candidates$$c2 === void 0 ? void 0 : (_result$candidates$$c3 = _result$candidates$$c2[0]) === null || _result$candidates$$c3 === void 0 ? void 0 : _result$candidates$$c3.text;\n}\nfunction Diagnosis() {\n  _s();\n  const [imageFile, setImageFile] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [analysisResult, setAnalysisResult] = useState(null);\n  const [summaryResult, setSummaryResult] = useState(null);\n  const [isSummaryLoading, setIsSummaryLoading] = useState(false);\n  const handleImageSelect = file => {\n    setImageFile(file);\n    setAnalysisResult(null);\n    setSummaryResult(null);\n  };\n  const handleAnalyze = () => {\n    setIsLoading(true);\n    setAnalysisResult(null);\n    setTimeout(() => {\n      const isPneumonia = Math.random() > 0.5;\n      const confidence = Math.random() * (0.99 - 0.85) + 0.85;\n      setAnalysisResult({\n        isPneumonia,\n        confidence\n      });\n      setIsLoading(false);\n    }, 2500);\n  };\n  const handleGenerateSummary = async () => {\n    if (!analysisResult) return;\n    setIsSummaryLoading(true);\n    setSummaryResult(null);\n    const {\n      isPneumonia,\n      confidence\n    } = analysisResult;\n    const resultString = isPneumonia ? \"Pneumonia Suspected\" : \"Normal\";\n    const confidencePercent = (confidence * 100).toFixed(1);\n    const systemPrompt = `You are a medical AI assistant specializing in radiology. Based on the analysis result of a chest X-ray, generate a brief, professional-looking report. The report should include a \"Findings\" section and an \"Impression\" section. The language must be concise and formal. Do not add any extra information or disclaimers.`;\n    const userQuery = `Analysis Result: ${resultString}, Confidence Score: ${confidencePercent}%. Generate the report.`;\n    try {\n      const text = await callGeminiAPI(systemPrompt, userQuery);\n      setSummaryResult(text);\n    } catch (error) {\n      setSummaryResult(\"오류가 발생하여 소견을 생성할 수 없습니다.\");\n      console.error(error);\n    } finally {\n      setIsSummaryLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-4xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"text-center mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-4xl sm:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-teal-300\",\n        children: \"AI \\uD3D0\\uB834 \\uC9C4\\uB2E8 \\uC5B4\\uC2DC\\uC2A4\\uD134\\uD2B8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-400 mt-2 max-w-2xl mx-auto\",\n        children: \"\\uD749\\uBD80 X-ray \\uC774\\uBBF8\\uC9C0\\uB97C \\uC5C5\\uB85C\\uB4DC\\uD558\\uC5EC \\uD3D0\\uB834 \\uAC00\\uB2A5\\uC131\\uC744 \\uD655\\uC778\\uD574 \\uBCF4\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"w-full glassmorphism rounded-2xl shadow-lg p-6 sm:p-8\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 gap-8 items-start\",\n        children: [/*#__PURE__*/_jsxDEV(ImageUploader, {\n          onImageSelect: handleImageSelect,\n          onAnalyze: handleAnalyze,\n          isLoading: isLoading,\n          imageFile: imageFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ResultCard, {\n          analysisResult: analysisResult,\n          summaryResult: summaryResult,\n          onGenerateSummary: handleGenerateSummary,\n          isSummaryLoading: isSummaryLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s(Diagnosis, \"S7P/kZpZbpZPN8T0U+I9bFdaqSY=\");\n_c = Diagnosis;\nexport default Diagnosis;\nvar _c;\n$RefreshReg$(_c, \"Diagnosis\");","map":{"version":3,"names":["React","useState","ImageUploader","ResultCard","jsxDEV","_jsxDEV","callGeminiAPI","systemPrompt","userQuery","_result$candidates","_result$candidates$","_result$candidates$$c","_result$candidates$$c2","_result$candidates$$c3","apiKey","apiUrl","payload","contents","parts","text","systemInstruction","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","result","json","candidates","content","Diagnosis","_s","imageFile","setImageFile","isLoading","setIsLoading","analysisResult","setAnalysisResult","summaryResult","setSummaryResult","isSummaryLoading","setIsSummaryLoading","handleImageSelect","file","handleAnalyze","setTimeout","isPneumonia","Math","random","confidence","handleGenerateSummary","resultString","confidencePercent","toFixed","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onImageSelect","onAnalyze","onGenerateSummary","_c","$RefreshReg$"],"sources":["D:/Medical AI/2nd_project_STrio/frontend/src/components/diagnosis/Diagnosis.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ImageUploader from './ImageUploader';\r\nimport ResultCard from './ResultCard';\r\n\r\n// Gemini API 호출 로직 (원래는 별도 api.js 파일로 분리하는 것이 좋습니다)\r\nasync function callGeminiAPI(systemPrompt, userQuery) {\r\n    const apiKey = \"\"; // 실제 앱에서는 백엔드에서 안전하게 처리해야 합니다.\r\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\r\n    const payload = { \r\n        contents: [{ parts: [{ text: userQuery }] }], \r\n        systemInstruction: { parts: [{ text: systemPrompt }] }, \r\n    };\r\n    const response = await fetch(apiUrl, { \r\n        method: 'POST', \r\n        headers: { 'Content-Type': 'application/json' }, \r\n        body: JSON.stringify(payload) \r\n    });\r\n    if (!response.ok) throw new Error(`API call failed: ${response.status}`);\r\n    const result = await response.json();\r\n    return result.candidates?.[0]?.content?.parts?.[0]?.text;\r\n}\r\n\r\nfunction Diagnosis() {\r\n    const [imageFile, setImageFile] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [analysisResult, setAnalysisResult] = useState(null);\r\n    const [summaryResult, setSummaryResult] = useState(null);\r\n    const [isSummaryLoading, setIsSummaryLoading] = useState(false);\r\n\r\n    const handleImageSelect = (file) => {\r\n        setImageFile(file);\r\n        setAnalysisResult(null);\r\n        setSummaryResult(null);\r\n    };\r\n\r\n    const handleAnalyze = () => {\r\n        setIsLoading(true);\r\n        setAnalysisResult(null);\r\n        setTimeout(() => {\r\n            const isPneumonia = Math.random() > 0.5;\r\n            const confidence = Math.random() * (0.99 - 0.85) + 0.85;\r\n            setAnalysisResult({ isPneumonia, confidence });\r\n            setIsLoading(false);\r\n        }, 2500);\r\n    };\r\n    \r\n    const handleGenerateSummary = async () => {\r\n        if (!analysisResult) return;\r\n        setIsSummaryLoading(true);\r\n        setSummaryResult(null);\r\n        const { isPneumonia, confidence } = analysisResult;\r\n        const resultString = isPneumonia ? \"Pneumonia Suspected\" : \"Normal\";\r\n        const confidencePercent = (confidence * 100).toFixed(1);\r\n        const systemPrompt = `You are a medical AI assistant specializing in radiology. Based on the analysis result of a chest X-ray, generate a brief, professional-looking report. The report should include a \"Findings\" section and an \"Impression\" section. The language must be concise and formal. Do not add any extra information or disclaimers.`;\r\n        const userQuery = `Analysis Result: ${resultString}, Confidence Score: ${confidencePercent}%. Generate the report.`;\r\n        try {\r\n            const text = await callGeminiAPI(systemPrompt, userQuery);\r\n            setSummaryResult(text);\r\n        } catch (error) {\r\n            setSummaryResult(\"오류가 발생하여 소견을 생성할 수 없습니다.\");\r\n            console.error(error);\r\n        } finally {\r\n            setIsSummaryLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full max-w-4xl mx-auto\">\r\n             <header className=\"text-center mb-8\">\r\n                <h1 className=\"text-4xl sm:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-teal-300\">\r\n                    AI 폐렴 진단 어시스턴트\r\n                </h1>\r\n                <p className=\"text-gray-400 mt-2 max-w-2xl mx-auto\">\r\n                    흉부 X-ray 이미지를 업로드하여 폐렴 가능성을 확인해 보세요.\r\n                </p>\r\n            </header>\r\n            <main className=\"w-full glassmorphism rounded-2xl shadow-lg p-6 sm:p-8\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 items-start\">\r\n                    <ImageUploader \r\n                        onImageSelect={handleImageSelect}\r\n                        onAnalyze={handleAnalyze}\r\n                        isLoading={isLoading}\r\n                        imageFile={imageFile}\r\n                    />\r\n                    <ResultCard \r\n                        analysisResult={analysisResult}\r\n                        summaryResult={summaryResult}\r\n                        onGenerateSummary={handleGenerateSummary}\r\n                        isSummaryLoading={isSummaryLoading}\r\n                    />\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Diagnosis;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}