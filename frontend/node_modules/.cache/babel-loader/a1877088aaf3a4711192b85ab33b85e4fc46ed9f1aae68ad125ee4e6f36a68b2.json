{"ast":null,"code":"import _objectSpread from\"D:/Medical AI/2nd_project_STrio/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import AuthLayout from'../AuthLayout';import instance from\"../../token/interceptors\";//import { useNavigate } from \"react-router-dom\";\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function SignUp(_ref){let{onNavigate}=_ref;// 1. 각 입력 필드에 대한 상태(state)를 만듭니다.\nconst[memberId,setMemberId]=useState('');const[password,setPassword]=useState('');const[confirmPassword,setConfirmPassword]=useState('');const[memberName,setMemberName]=useState('');const[email,setEmail]=useState('');//const navigate = useNavigate();\nconst[members,setMembers]=useState({userId:\"\",passwd:\"\",userName:\"\",roleCd:\"\"});const handleValueChange=e=>{setMembers(prev=>{return _objectSpread(_objectSpread({},prev),{},{[e.target.name]:e.target.value});});};const onSubmit=async e=>{e.preventDefault();setError('');// 이전 에러 메시지 초기화\n// 3. 클라이언트 측 유효성 검사\nif(!members.userId||!members.passwd||!members.userName||!members.email){setError(\"모든 항목을 입력해주세요.\");return;}if(members.passwd!==confirmPassword){setError(\"비밀번호가 일치하지 않습니다.\");return;}await instance.post(\"/member/signup\",members).then(response=>{console.log(response.data);onNavigate('login');// 로그인 페이지로 이동\n}).catch(error=>{console.log(\"signup 오류:\",error.message);});};// 2. 에러 메시지를 위한 상태를 만듭니다.\nconst[error,setError]=useState('');// '가입하기' 버튼 클릭 시 실행될 함수\nconst handleSubmit=async e=>{e.preventDefault();// 페이지 새로고침 방지\nsetError('');// 이전 에러 메시지 초기화\n// 3. 클라이언트 측 유효성 검사\nif(!memberId||!password||!memberName||!email){setError(\"모든 항목을 입력해주세요.\");return;}if(password!==confirmPassword){setError(\"비밀번호가 일치하지 않습니다.\");return;}// 4. API 호출 및 서버 측 유효성 검사 (시뮬레이션)\ntry{// 실제로는 여기서 백엔드 API에 fetch 요청을 보냅니다.\n// (예: const response = await fetch('/api/signup', { ... });)\n// 아이디 중복 체크 시뮬레이션\nif(memberId==='existinguser'){throw new Error('이미 사용 중인 아이디입니다.');}// 모든 검증 통과 시\nalert('회원가입이 성공적으로 완료되었습니다!');onNavigate('login');// 로그인 페이지로 이동\n}catch(err){// API 호출 중 에러 발생 시 (e.g., 아이디 중복)\nsetError(err.message);}};const inputStyles=\"w-full p-2 bg-gray-700 rounded mt-1 border border-gray-600 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50\";return/*#__PURE__*/_jsxs(AuthLayout,{title:\"\\uD68C\\uC6D0\\uAC00\\uC785\",children:[/*#__PURE__*/_jsxs(\"form\",{onSubmit:onSubmit,className:\"space-y-4\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-300\",children:\"\\uC544\\uC774\\uB514\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"userId\",value:members.userId,onChange:handleValueChange,className:inputStyles})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-300\",children:\"\\uBE44\\uBC00\\uBC88\\uD638\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",name:\"passwd\",value:members.passwd,onChange:handleValueChange,className:inputStyles})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-300\",children:\"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:confirmPassword,onChange:e=>setConfirmPassword(e.target.value),className:inputStyles})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-300\",children:\"\\uC774\\uB984\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"userName\",value:members.userName,onChange:handleValueChange,className:inputStyles})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-300\",children:\"\\uC774\\uBA54\\uC77C\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",name:\"email\",value:members.email,onChange:handleValueChange,className:inputStyles})]}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"text-red-400 text-center text-sm pt-2\",children:error}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"w-full bg-green-600 py-2 mt-4 rounded hover:bg-green-700 font-bold transition-colors duration-200\",children:\"\\uAC00\\uC785\\uD558\\uAE30\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-center mt-6\",children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>onNavigate('login'),className:\"text-sm text-blue-400 hover:underline\",children:\"\\uC774\\uBBF8 \\uACC4\\uC815\\uC774 \\uC788\\uC73C\\uC2E0\\uAC00\\uC694? \\uB85C\\uADF8\\uC778\"})})]});}export default SignUp;","map":{"version":3,"names":["React","useState","AuthLayout","instance","jsx","_jsx","jsxs","_jsxs","SignUp","_ref","onNavigate","memberId","setMemberId","password","setPassword","confirmPassword","setConfirmPassword","memberName","setMemberName","email","setEmail","members","setMembers","userId","passwd","userName","roleCd","handleValueChange","e","prev","_objectSpread","target","name","value","onSubmit","preventDefault","setError","post","then","response","console","log","data","catch","error","message","handleSubmit","Error","alert","err","inputStyles","title","children","className","type","onChange","onClick"],"sources":["D:/Medical AI/2nd_project_STrio/frontend/src/components/login/SignUp.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport AuthLayout from '../AuthLayout';\r\nimport instance from \"../../token/interceptors\";\r\n//import { useNavigate } from \"react-router-dom\";\r\n\r\nfunction SignUp({ onNavigate }) {\r\n    // 1. 각 입력 필드에 대한 상태(state)를 만듭니다.\r\n    const [memberId, setMemberId] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [memberName, setMemberName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    //const navigate = useNavigate();\r\n    const [members, setMembers] = useState({\r\n        userId: \"\",\r\n        passwd: \"\",\r\n        userName: \"\",\r\n        roleCd: \"\",\r\n    });    \r\n\r\n    const handleValueChange = (e) => {\r\n        setMembers((prev) => {\r\n        return { ...prev, [e.target.name]: e.target.value };\r\n        });\r\n    };    \r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError(''); // 이전 에러 메시지 초기화\r\n\r\n        // 3. 클라이언트 측 유효성 검사\r\n        if (!members.userId || !members.passwd || !members.userName || !members.email) {\r\n            setError(\"모든 항목을 입력해주세요.\");\r\n            return;\r\n        }\r\n        if (members.passwd !== confirmPassword) {\r\n            setError(\"비밀번호가 일치하지 않습니다.\");\r\n            return;\r\n        }\r\n        \r\n        await instance\r\n        .post(`/member/signup`, members)\r\n        .then((response) => {\r\n            console.log(response.data);\r\n            onNavigate('login'); // 로그인 페이지로 이동\r\n        })\r\n        .catch((error) => {\r\n            console.log(\"signup 오류:\", error.message);\r\n        });\r\n    };\r\n\r\n    // 2. 에러 메시지를 위한 상태를 만듭니다.\r\n    const [error, setError] = useState('');\r\n\r\n    // '가입하기' 버튼 클릭 시 실행될 함수\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); // 페이지 새로고침 방지\r\n        setError(''); // 이전 에러 메시지 초기화\r\n\r\n        // 3. 클라이언트 측 유효성 검사\r\n        if (!memberId || !password || !memberName || !email) {\r\n            setError(\"모든 항목을 입력해주세요.\");\r\n            return;\r\n        }\r\n        if (password !== confirmPassword) {\r\n            setError(\"비밀번호가 일치하지 않습니다.\");\r\n            return;\r\n        }\r\n\r\n        // 4. API 호출 및 서버 측 유효성 검사 (시뮬레이션)\r\n        try {\r\n            // 실제로는 여기서 백엔드 API에 fetch 요청을 보냅니다.\r\n            // (예: const response = await fetch('/api/signup', { ... });)\r\n            \r\n            // 아이디 중복 체크 시뮬레이션\r\n            if (memberId === 'existinguser') {\r\n                throw new Error('이미 사용 중인 아이디입니다.');\r\n            }\r\n\r\n            // 모든 검증 통과 시\r\n            alert('회원가입이 성공적으로 완료되었습니다!');\r\n            onNavigate('login'); // 로그인 페이지로 이동\r\n\r\n        } catch (err) {\r\n            // API 호출 중 에러 발생 시 (e.g., 아이디 중복)\r\n            setError(err.message);\r\n        }\r\n    };\r\n\r\n    \r\n    const inputStyles = \"w-full p-2 bg-gray-700 rounded mt-1 border border-gray-600 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50\";\r\n\r\n    return (\r\n        <AuthLayout title=\"회원가입\">\r\n            <form onSubmit={onSubmit} className=\"space-y-4\">\r\n                <div>\r\n                    <label className=\"block text-sm font-medium text-gray-300\">아이디</label>\r\n                    <input type=\"text\" name=\"userId\" value={members.userId} onChange={handleValueChange} className={inputStyles} />\r\n                </div>\r\n                <div>\r\n                    <label className=\"block text-sm font-medium text-gray-300\">비밀번호</label>\r\n                    <input type=\"password\" name=\"passwd\" value={members.passwd} onChange={handleValueChange} className={inputStyles} />\r\n                </div>\r\n                <div>\r\n                    <label className=\"block text-sm font-medium text-gray-300\">비밀번호 확인</label>\r\n                    <input type=\"password\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} className={inputStyles} />\r\n                </div>\r\n                <div>\r\n                    <label className=\"block text-sm font-medium text-gray-300\">이름</label>\r\n                    <input type=\"text\" name=\"userName\" value={members.userName} onChange={handleValueChange} className={inputStyles} />\r\n                </div>\r\n                <div>\r\n                    <label className=\"block text-sm font-medium text-gray-300\">이메일</label>\r\n                    <input type=\"email\" name=\"email\" value={members.email} onChange={handleValueChange} className={inputStyles} />\r\n                </div>\r\n\r\n                {error && <p className=\"text-red-400 text-center text-sm pt-2\">{error}</p>}\r\n                \r\n                <button type=\"submit\" className=\"w-full bg-green-600 py-2 mt-4 rounded hover:bg-green-700 font-bold transition-colors duration-200\">\r\n                    가입하기\r\n                </button>\r\n            </form>\r\n            <div className=\"text-center mt-6\">\r\n                <button onClick={() => onNavigate('login')} className=\"text-sm text-blue-400 hover:underline\">\r\n                    이미 계정이 있으신가요? 로그인\r\n                </button>\r\n            </div>\r\n        </AuthLayout>\r\n    );\r\n}\r\n\r\nexport default SignUp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}