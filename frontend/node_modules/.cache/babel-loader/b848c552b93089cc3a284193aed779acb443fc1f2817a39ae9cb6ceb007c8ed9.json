{"ast":null,"code":"import axios from\"axios\";/**\n* ✅ AccessToken 재발급 함수\n* RefreshToken을 이용해 새로운 AccessToken을 발급받습니다.\n*/const refreshAccessToken=async()=>{try{const refreshToken=localStorage.getItem(\"Authorization-refresh\");if(!refreshToken)throw new Error(\"refreshToken 없음\");const response=await axios.post(\"/auth/refresh\",{},{baseURL:\"http://localhost:8090\",headers:{\"Authorization-refresh\":refreshToken},withCredentials:true});return response.data.accessToken;}catch(error){console.error(\"❌ refreshToken 갱신 실패:\",error);throw error;}};/**\n* ✅ Axios 공통 인스턴스\n*/const instance=axios.create({baseURL:\"http://localhost:8090\",withCredentials:true// 쿠키 및 인증정보 포함\n});/**\n* ✅ 요청 인터셉터\n* 모든 요청에 AccessToken 자동 포함\n*/instance.interceptors.request.use(config=>{const token=localStorage.getItem(\"Authorization\");if(token){config.headers[\"Authorization\"]=token;// ex) \"Bearer eyJ...\"\n}return config;},error=>Promise.reject(error));/**\n* ✅ 응답 인터셉터\n* 401(Unauthorized) 발생 시 AccessToken 재발급 처리\n*/instance.interceptors.response.use(response=>response,async error=>{const originalRequest=error.config;/**\n    * 1️⃣ 로그인/회원가입/아이디찾기 등 비인증 요청은 예외처리\n    * -> 세션 만료 메시지 표시 X\n    */const unauthenticatedEndpoints=[\"/login\",\"/signup\",\"/find-account\"];if(unauthenticatedEndpoints.some(url=>originalRequest.url.includes(url))){return Promise.reject(error);// 그대로 Login.jsx 등으로 전달\n}/**\n    * 2️⃣ AccessToken 만료로 인한 401 에러 처리\n    */if(error.response&&error.response.status===401&&!originalRequest._retry){originalRequest._retry=true;try{// AccessToken 재발급\nconst newAccessToken=await refreshAccessToken();const bearerToken=\"Bearer \".concat(newAccessToken);// 새 토큰 저장\nlocalStorage.setItem(\"Authorization\",bearerToken);// 요청 헤더 갱신\noriginalRequest.headers[\"Authorization\"]=bearerToken;if(originalRequest.data instanceof FormData&&!originalRequest.headers[\"Content-Type\"]){originalRequest.headers[\"Content-Type\"]=\"multipart/form-data\";}// ✅ 재요청 실행\nreturn instance(originalRequest);}catch(refreshError){console.error(\"❌ refreshToken 재발급 실패:\",refreshError);localStorage.removeItem(\"Authorization\");localStorage.removeItem(\"Authorization-refresh\");localStorage.removeItem(\"userId\");localStorage.removeItem(\"userName\");localStorage.removeItem(\"roleCd\");localStorage.removeItem(\"isLogin\");console.error(\"세션이 만료되었습니다. 다시 로그인해주세요.\");return Promise.reject(refreshError);}}return Promise.reject(error);});export default instance;","map":{"version":3,"names":["axios","refreshAccessToken","refreshToken","localStorage","getItem","Error","response","post","baseURL","headers","withCredentials","data","accessToken","error","console","instance","create","interceptors","request","use","config","token","Promise","reject","originalRequest","unauthenticatedEndpoints","some","url","includes","status","_retry","newAccessToken","bearerToken","concat","setItem","FormData","refreshError","removeItem"],"sources":["D:/Medical AI/2nd_project_STrio/frontend/src/token/interceptors.js"],"sourcesContent":["import axios from \"axios\";\n\n/**\n* ✅ AccessToken 재발급 함수\n* RefreshToken을 이용해 새로운 AccessToken을 발급받습니다.\n*/\nconst refreshAccessToken = async () => {\ntry {\n    const refreshToken = localStorage.getItem(\"Authorization-refresh\");\n    if (!refreshToken) throw new Error(\"refreshToken 없음\");\n\n    const response = await axios.post(\n    \"/auth/refresh\",\n    {},\n    {\n        baseURL: \"http://localhost:8090\",\n        headers: {\n        \"Authorization-refresh\": refreshToken,\n        },\n        withCredentials: true,\n    }\n    );\n\n    return response.data.accessToken;\n} catch (error) {\n    console.error(\"❌ refreshToken 갱신 실패:\", error);\n    throw error;\n}\n};\n\n/**\n* ✅ Axios 공통 인스턴스\n*/\nconst instance = axios.create({\nbaseURL: \"http://localhost:8090\",\nwithCredentials: true, // 쿠키 및 인증정보 포함\n});\n\n/**\n* ✅ 요청 인터셉터\n* 모든 요청에 AccessToken 자동 포함\n*/\ninstance.interceptors.request.use(\n(config) => {\n    const token = localStorage.getItem(\"Authorization\");\n    if (token) {\n    config.headers[\"Authorization\"] = token; // ex) \"Bearer eyJ...\"\n    }\n    return config;\n},\n(error) => Promise.reject(error)\n);\n\n/**\n* ✅ 응답 인터셉터\n* 401(Unauthorized) 발생 시 AccessToken 재발급 처리\n*/\ninstance.interceptors.response.use(\n(response) => response,\nasync (error) => {\n    const originalRequest = error.config;\n\n    /**\n    * 1️⃣ 로그인/회원가입/아이디찾기 등 비인증 요청은 예외처리\n    * -> 세션 만료 메시지 표시 X\n    */\n    const unauthenticatedEndpoints = [\"/login\", \"/signup\", \"/find-account\"];\n    if (unauthenticatedEndpoints.some((url) => originalRequest.url.includes(url))) {\n    return Promise.reject(error); // 그대로 Login.jsx 등으로 전달\n    }\n\n    /**\n    * 2️⃣ AccessToken 만료로 인한 401 에러 처리\n    */\n    if (\n    error.response &&\n    error.response.status === 401 &&\n    !originalRequest._retry\n    ) {\n    originalRequest._retry = true;\n\n    try {\n        // AccessToken 재발급\n        const newAccessToken = await refreshAccessToken();\n        const bearerToken = `Bearer ${newAccessToken}`;\n\n        // 새 토큰 저장\n        localStorage.setItem(\"Authorization\", bearerToken);\n\n        // 요청 헤더 갱신\n        originalRequest.headers[\"Authorization\"] = bearerToken;\n        if (\n        originalRequest.data instanceof FormData &&\n        !originalRequest.headers[\"Content-Type\"]\n        ) {\n        originalRequest.headers[\"Content-Type\"] = \"multipart/form-data\";\n        }\n\n        // ✅ 재요청 실행\n        return instance(originalRequest);\n    } catch (refreshError) {\n        console.error(\"❌ refreshToken 재발급 실패:\", refreshError);\n\n        localStorage.removeItem(\"Authorization\");\n        localStorage.removeItem(\"Authorization-refresh\");\n        localStorage.removeItem(\"userId\");\n        localStorage.removeItem(\"userName\");\n        localStorage.removeItem(\"roleCd\");\n        localStorage.removeItem(\"isLogin\");\n\n        console.error(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\n\n        return Promise.reject(refreshError);\n    }\n    }\n\n    return Promise.reject(error);\n}\n);\n\nexport default instance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}