{"ast":null,"code":"import axios from \"axios\";\n\n/**\r\n * ✅ AccessToken 재발급 함수\r\n * RefreshToken을 이용해 새로운 AccessToken을 발급받습니다.\r\n */\nconst refreshAccessToken = async () => {\n  try {\n    const refreshToken = localStorage.getItem(\"Authorization-refresh\");\n    if (!refreshToken) throw new Error(\"refreshToken 없음\");\n    const response = await axios.post(\"/auth/refresh\", {}, {\n      baseURL: \"http://localhost:8090\",\n      headers: {\n        \"Authorization-refresh\": refreshToken\n      },\n      withCredentials: true\n    });\n    return response.data.accessToken;\n  } catch (error) {\n    console.error(\"❌ refreshToken 갱신 실패:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * ✅ Axios 공통 인스턴스\r\n */\nconst instance = axios.create({\n  baseURL: \"http://localhost:8090\",\n  withCredentials: true // 쿠키 및 인증정보 포함\n});\n\n/**\r\n * ✅ 요청 인터셉터\r\n * 모든 요청에 AccessToken 자동 포함\r\n */\ninstance.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"Authorization\");\n  if (token) {\n    config.headers[\"Authorization\"] = token; // ex) \"Bearer eyJ...\"\n  }\n  return config;\n}, error => Promise.reject(error));\n\n/**\r\n * ✅ 응답 인터셉터\r\n * 401(Unauthorized) 발생 시 AccessToken 재발급 처리\r\n */\ninstance.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  /**\r\n   * 1️⃣ 로그인/회원가입/아이디찾기 등 비인증 요청은 예외처리\r\n   * -> 세션 만료 메시지 표시 X\r\n   */\n  const unauthenticatedEndpoints = [\"/login\", \"/signup\", \"/find-account\"];\n  if (unauthenticatedEndpoints.some(url => originalRequest.url.includes(url))) {\n    return Promise.reject(error); // 그대로 Login.jsx 등으로 전달\n  }\n\n  /**\r\n   * 2️⃣ AccessToken 만료로 인한 401 에러 처리\r\n   */\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // AccessToken 재발급\n      const newAccessToken = await refreshAccessToken();\n      const bearerToken = `Bearer ${newAccessToken}`;\n\n      // 새 토큰 저장\n      localStorage.setItem(\"Authorization\", bearerToken);\n\n      // 요청 헤더 갱신\n      originalRequest.headers[\"Authorization\"] = bearerToken;\n\n      // ✅ 재요청 실행\n      return instance(originalRequest);\n    } catch (refreshError) {\n      console.error(\"❌ refreshToken 재발급 실패:\", refreshError);\n\n      /**\r\n       * 3️⃣ refreshToken도 만료되었거나 재발급 실패 → 로그아웃 처리\r\n       */\n      localStorage.removeItem(\"Authorization\");\n      localStorage.removeItem(\"Authorization-refresh\");\n      localStorage.removeItem(\"userId\");\n      localStorage.removeItem(\"userName\");\n      localStorage.removeItem(\"roleCd\");\n      localStorage.removeItem(\"isLogin\");\n      alert(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\n\n      // React SPA에서는 전체 새로고침 없이 상태만 초기화\n      return Promise.reject(refreshError);\n    }\n  }\n\n  /**\r\n   * 4️⃣ 기타 오류는 그대로 상위로 전파\r\n   */\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","refreshAccessToken","refreshToken","localStorage","getItem","Error","response","post","baseURL","headers","withCredentials","data","accessToken","error","console","instance","create","interceptors","request","use","config","token","Promise","reject","originalRequest","unauthenticatedEndpoints","some","url","includes","status","_retry","newAccessToken","bearerToken","setItem","refreshError","removeItem","alert"],"sources":["D:/Medical AI/2nd_project_STrio/frontend/src/token/interceptors.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n/**\r\n * ✅ AccessToken 재발급 함수\r\n * RefreshToken을 이용해 새로운 AccessToken을 발급받습니다.\r\n */\r\nconst refreshAccessToken = async () => {\r\n  try {\r\n    const refreshToken = localStorage.getItem(\"Authorization-refresh\");\r\n    if (!refreshToken) throw new Error(\"refreshToken 없음\");\r\n\r\n    const response = await axios.post(\r\n      \"/auth/refresh\",\r\n      {},\r\n      {\r\n        baseURL: \"http://localhost:8090\",\r\n        headers: {\r\n          \"Authorization-refresh\": refreshToken,\r\n        },\r\n        withCredentials: true,\r\n      }\r\n    );\r\n\r\n    return response.data.accessToken;\r\n  } catch (error) {\r\n    console.error(\"❌ refreshToken 갱신 실패:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * ✅ Axios 공통 인스턴스\r\n */\r\nconst instance = axios.create({\r\n  baseURL: \"http://localhost:8090\",\r\n  withCredentials: true, // 쿠키 및 인증정보 포함\r\n});\r\n\r\n/**\r\n * ✅ 요청 인터셉터\r\n * 모든 요청에 AccessToken 자동 포함\r\n */\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"Authorization\");\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = token; // ex) \"Bearer eyJ...\"\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n/**\r\n * ✅ 응답 인터셉터\r\n * 401(Unauthorized) 발생 시 AccessToken 재발급 처리\r\n */\r\ninstance.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    /**\r\n     * 1️⃣ 로그인/회원가입/아이디찾기 등 비인증 요청은 예외처리\r\n     * -> 세션 만료 메시지 표시 X\r\n     */\r\n    const unauthenticatedEndpoints = [\"/login\", \"/signup\", \"/find-account\"];\r\n    if (unauthenticatedEndpoints.some((url) => originalRequest.url.includes(url))) {\r\n      return Promise.reject(error); // 그대로 Login.jsx 등으로 전달\r\n    }\r\n\r\n    /**\r\n     * 2️⃣ AccessToken 만료로 인한 401 에러 처리\r\n     */\r\n    if (\r\n      error.response &&\r\n      error.response.status === 401 &&\r\n      !originalRequest._retry\r\n    ) {\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        // AccessToken 재발급\r\n        const newAccessToken = await refreshAccessToken();\r\n        const bearerToken = `Bearer ${newAccessToken}`;\r\n\r\n        // 새 토큰 저장\r\n        localStorage.setItem(\"Authorization\", bearerToken);\r\n\r\n        // 요청 헤더 갱신\r\n        originalRequest.headers[\"Authorization\"] = bearerToken;\r\n\r\n        // ✅ 재요청 실행\r\n        return instance(originalRequest);\r\n      } catch (refreshError) {\r\n        console.error(\"❌ refreshToken 재발급 실패:\", refreshError);\r\n\r\n        /**\r\n         * 3️⃣ refreshToken도 만료되었거나 재발급 실패 → 로그아웃 처리\r\n         */\r\n        localStorage.removeItem(\"Authorization\");\r\n        localStorage.removeItem(\"Authorization-refresh\");\r\n        localStorage.removeItem(\"userId\");\r\n        localStorage.removeItem(\"userName\");\r\n        localStorage.removeItem(\"roleCd\");\r\n        localStorage.removeItem(\"isLogin\");\r\n\r\n        alert(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\r\n\r\n        // React SPA에서는 전체 새로고침 없이 상태만 초기화\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 4️⃣ 기타 오류는 그대로 상위로 전파\r\n     */\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,uBAAuB,CAAC;IAClE,IAAI,CAACF,YAAY,EAAE,MAAM,IAAIG,KAAK,CAAC,iBAAiB,CAAC;IAErD,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAC/B,eAAe,EACf,CAAC,CAAC,EACF;MACEC,OAAO,EAAE,uBAAuB;MAChCC,OAAO,EAAE;QACP,uBAAuB,EAAEP;MAC3B,CAAC;MACDQ,eAAe,EAAE;IACnB,CACF,CAAC;IAED,OAAOJ,QAAQ,CAACK,IAAI,CAACC,WAAW;EAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,MAAME,QAAQ,GAAGf,KAAK,CAACgB,MAAM,CAAC;EAC5BR,OAAO,EAAE,uBAAuB;EAChCE,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACAK,QAAQ,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGlB,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;EACnD,IAAIiB,KAAK,EAAE;IACTD,MAAM,CAACX,OAAO,CAAC,eAAe,CAAC,GAAGY,KAAK,CAAC,CAAC;EAC3C;EACA,OAAOD,MAAM;AACf,CAAC,EACAP,KAAK,IAAKS,OAAO,CAACC,MAAM,CAACV,KAAK,CACjC,CAAC;;AAED;AACA;AACA;AACA;AACAE,QAAQ,CAACE,YAAY,CAACX,QAAQ,CAACa,GAAG,CAC/Bb,QAAQ,IAAKA,QAAQ,EACtB,MAAOO,KAAK,IAAK;EACf,MAAMW,eAAe,GAAGX,KAAK,CAACO,MAAM;;EAEpC;AACJ;AACA;AACA;EACI,MAAMK,wBAAwB,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,eAAe,CAAC;EACvE,IAAIA,wBAAwB,CAACC,IAAI,CAAEC,GAAG,IAAKH,eAAe,CAACG,GAAG,CAACC,QAAQ,CAACD,GAAG,CAAC,CAAC,EAAE;IAC7E,OAAOL,OAAO,CAACC,MAAM,CAACV,KAAK,CAAC,CAAC,CAAC;EAChC;;EAEA;AACJ;AACA;EACI,IACEA,KAAK,CAACP,QAAQ,IACdO,KAAK,CAACP,QAAQ,CAACuB,MAAM,KAAK,GAAG,IAC7B,CAACL,eAAe,CAACM,MAAM,EACvB;IACAN,eAAe,CAACM,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF;MACA,MAAMC,cAAc,GAAG,MAAM9B,kBAAkB,CAAC,CAAC;MACjD,MAAM+B,WAAW,GAAG,UAAUD,cAAc,EAAE;;MAE9C;MACA5B,YAAY,CAAC8B,OAAO,CAAC,eAAe,EAAED,WAAW,CAAC;;MAElD;MACAR,eAAe,CAACf,OAAO,CAAC,eAAe,CAAC,GAAGuB,WAAW;;MAEtD;MACA,OAAOjB,QAAQ,CAACS,eAAe,CAAC;IAClC,CAAC,CAAC,OAAOU,YAAY,EAAE;MACrBpB,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEqB,YAAY,CAAC;;MAErD;AACR;AACA;MACQ/B,YAAY,CAACgC,UAAU,CAAC,eAAe,CAAC;MACxChC,YAAY,CAACgC,UAAU,CAAC,uBAAuB,CAAC;MAChDhC,YAAY,CAACgC,UAAU,CAAC,QAAQ,CAAC;MACjChC,YAAY,CAACgC,UAAU,CAAC,UAAU,CAAC;MACnChC,YAAY,CAACgC,UAAU,CAAC,QAAQ,CAAC;MACjChC,YAAY,CAACgC,UAAU,CAAC,SAAS,CAAC;MAElCC,KAAK,CAAC,0BAA0B,CAAC;;MAEjC;MACA,OAAOd,OAAO,CAACC,MAAM,CAACW,YAAY,CAAC;IACrC;EACF;;EAEA;AACJ;AACA;EACI,OAAOZ,OAAO,CAACC,MAAM,CAACV,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeE,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}