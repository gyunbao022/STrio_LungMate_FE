{"ast":null,"code":"import React,{useEffect,useRef}from\"react\";import instance from\"../../token/interceptors\";const Logout=_ref=>{let{onNavigate,onLogout}=_ref;const hasRun=useRef(false);const config={headers:{\"Content-Type\":\"application/json\",Authorization:localStorage.getItem(\"Authorization\"),\"Authorization-refresh\":localStorage.getItem(\"Authorization-refresh\")}};const handleCommit=async()=>{console.log(\"logout start\");const userId=localStorage.getItem(\"userId\");console.log(\"logout userId =>\",userId);try{await instance.delete(\"/member/logout\",config);}catch(error){console.warn(\"logout 실패 =>\",error.message);}// 로컬스토리지 완전 정리\nlocalStorage.clear();// App 상태 초기화\nonLogout();// currentUser = null, currentPage = main\nonNavigate(\"main\");// 메인화면으로 이동\nconsole.log(\"logout 완료, 메인 페이지 이동\");};useEffect(()=>{if(!hasRun.current){hasRun.current=true;handleCommit();}},[]);return null;// 별도 렌더링 필요 없음\n};export default Logout;","map":{"version":3,"names":["React","useEffect","useRef","instance","Logout","_ref","onNavigate","onLogout","hasRun","config","headers","Authorization","localStorage","getItem","handleCommit","console","log","userId","delete","error","warn","message","clear","current"],"sources":["D:/Medical AI/2nd_project_STrio/frontend/src/components/login/Logout.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport instance from \"../../token/interceptors\";\r\n\r\nconst Logout = ({ onNavigate, onLogout }) => {\r\n  const hasRun = useRef(false);\r\n\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: localStorage.getItem(\"Authorization\"),\r\n      \"Authorization-refresh\": localStorage.getItem(\"Authorization-refresh\"),\r\n    },\r\n  };\r\n\r\n  const handleCommit = async () => {\r\n    console.log(\"logout start\");\r\n    const userId = localStorage.getItem(\"userId\");\r\n    console.log(\"logout userId =>\", userId);\r\n\r\n    try {\r\n      await instance.delete(`/member/logout`, config);\r\n    } catch (error) {\r\n      console.warn(\"logout 실패 =>\", error.message);\r\n    }\r\n\r\n    // 로컬스토리지 완전 정리\r\n    localStorage.clear();\r\n\r\n    // App 상태 초기화\r\n    onLogout(); // currentUser = null, currentPage = main\r\n    onNavigate(\"main\"); // 메인화면으로 이동\r\n\r\n    console.log(\"logout 완료, 메인 페이지 이동\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!hasRun.current) {\r\n      hasRun.current = true;\r\n      handleCommit();\r\n    }\r\n  }, []);\r\n\r\n  return null; // 별도 렌더링 필요 없음\r\n};\r\n\r\nexport default Logout;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAChD,MAAO,CAAAC,QAAQ,KAAM,0BAA0B,CAE/C,KAAM,CAAAC,MAAM,CAAGC,IAAA,EAA8B,IAA7B,CAAEC,UAAU,CAAEC,QAAS,CAAC,CAAAF,IAAA,CACtC,KAAM,CAAAG,MAAM,CAAGN,MAAM,CAAC,KAAK,CAAC,CAE5B,KAAM,CAAAO,MAAM,CAAG,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClCC,aAAa,CAAEC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CACpD,uBAAuB,CAAED,YAAY,CAACC,OAAO,CAAC,uBAAuB,CACvE,CACF,CAAC,CAED,KAAM,CAAAC,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/BC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,CAC3B,KAAM,CAAAC,MAAM,CAAGL,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAC7CE,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEC,MAAM,CAAC,CAEvC,GAAI,CACF,KAAM,CAAAd,QAAQ,CAACe,MAAM,kBAAmBT,MAAM,CAAC,CACjD,CAAE,MAAOU,KAAK,CAAE,CACdJ,OAAO,CAACK,IAAI,CAAC,cAAc,CAAED,KAAK,CAACE,OAAO,CAAC,CAC7C,CAEA;AACAT,YAAY,CAACU,KAAK,CAAC,CAAC,CAEpB;AACAf,QAAQ,CAAC,CAAC,CAAE;AACZD,UAAU,CAAC,MAAM,CAAC,CAAE;AAEpBS,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CACrC,CAAC,CAEDf,SAAS,CAAC,IAAM,CACd,GAAI,CAACO,MAAM,CAACe,OAAO,CAAE,CACnBf,MAAM,CAACe,OAAO,CAAG,IAAI,CACrBT,YAAY,CAAC,CAAC,CAChB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,KAAI,CAAE;AACf,CAAC,CAED,cAAe,CAAAV,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}